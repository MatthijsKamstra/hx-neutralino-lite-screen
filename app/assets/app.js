// Generated by Haxe 4.1.4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var SketcherBase = function(settings) {
	this.description = "";
	this.patternName = "";
	this.isDebug = false;
	this.isDrawActive = true;
	if(this.isDebug) {
		haxe_Log.trace("START :: " + this.toString(),{ fileName : "SketcherBase.hx", lineNumber : 36, className : "SketcherBase", methodName : "new"});
	}
	if(settings == null) {
		var stageW = 1080;
		var stageH = 1080;
		settings = new Settings(stageW,stageH,"canvas");
		settings.set_autostart(true);
		settings.set_padding(10);
		settings.set_scale(false);
		settings.set_elementID("sketcher-canvas-wrapper");
	}
	if(settings != null && settings.get_element() != null) {
		haxe_Log.trace(settings.get_element(),{ fileName : "SketcherBase.hx", lineNumber : 52, className : "SketcherBase", methodName : "new"});
	}
	if(settings.get_elementID() != null && window.document.getElementById(settings.get_elementID()) == null) {
		var div0 = window.document.createElement("div");
		div0.id = "" + settings.get_elementID();
		div0.className = "sketcher-wrapper " + settings.get_type() + "-wrapper";
		window.document.body.appendChild(div0);
		this.sketch = Sketcher.create(settings).appendTo(div0);
	} else {
		this.sketch = Sketcher.create(settings).appendTo(window.document.getElementById(settings.get_elementID()));
	}
	window.addEventListener(Globals.RESIZE,$bind(this,this._reset),false);
	window.addEventListener(Globals.KEY_DOWN,$bind(this,this._keyDown),false);
	window.addEventListener(Globals.KEY_UP,$bind(this,this._keyUp),false);
	window.addEventListener(Globals.MOUSE_UP,$bind(this,this._mouseUp));
	this.setup();
	this._draw();
	$global.console.groupCollapsed("Default cc-sketcher keyboard shortcuts are activated");
	$global.console.info("• [cmd + r] = reload page\n• [cmd + s] = save jpg\n• [cmd + shift + s] = save png\n• [cmd + ctrl + s] = save transparant png\n• [cmd + alt + s] = save svg\n• [cmd + f] = toggle fullscreen");
	$global.console.groupEnd();
};
SketcherBase.__name__ = "SketcherBase";
SketcherBase.prototype = {
	_keyDown: function(e) {
		if(e.metaKey == true && e.key == "r") {
			$global.console.log("[cmd + r] = reload page");
			$global.location.reload();
		}
		if(e.metaKey == true && e.key == "s" && e.shiftKey == false && e.ctrlKey == false) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + s] = save jpg");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-jpg",{ fileName : "SketcherBase.hx", lineNumber : 99, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.svg2Canvas(this.sketch.getSVGElement(),true,this.getFileName());
			} else {
				haxe_Log.trace("canvas-jpg",{ fileName : "SketcherBase.hx", lineNumber : 103, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadImageBg(this.sketch.canvas.getContext("2d",null),true,this.getFileName());
			}
		}
		if(e.metaKey == true && e.key == "s" && e.shiftKey == true) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + shift + s] = save png");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-png",{ fileName : "SketcherBase.hx", lineNumber : 116, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.svg2Canvas(this.sketch.getSVGElement(),false,this.getFileName());
			} else {
				haxe_Log.trace("canvas-png",{ fileName : "SketcherBase.hx", lineNumber : 120, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadImageBg(this.sketch.canvas.getContext("2d",null),false,this.getFileName());
			}
		}
		if(e.metaKey == true && e.key == "s" && e.ctrlKey == true) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + ctrl + s] = save transparant png");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-png-transparant",{ fileName : "SketcherBase.hx", lineNumber : 131, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.svg2Canvas(this.sketch.getSVGElement(),false,this.getFileName(),true);
			} else {
				haxe_Log.trace("canvas-png-transparant",{ fileName : "SketcherBase.hx", lineNumber : 135, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadImageBg(this.sketch.canvas.getContext("2d",null),false,this.getFileName(),true);
			}
		}
		if(e.metaKey == true && (e.code == "KeyS" && e.altKey == true)) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + alt + s] = save svg");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-text",{ fileName : "SketcherBase.hx", lineNumber : 148, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadTextFile(this.sketch.svg,"" + this.getFileName() + ".svg");
			} else {
				$global.console.warn("no canvas-2-svg");
			}
		}
		if(e.metaKey == true && e.key == "f") {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + f] = toggle fullscreen");
			if(!Globals.isFullscreen) {
				this.openFullscreen();
				Globals.isFullscreen = true;
			} else {
				this.closeFullscreen();
				Globals.isFullscreen = false;
			}
		}
		if(e.key == " ") {
			this.draw();
		}
	}
	,_keyUp: function(e) {
	}
	,_mouseUp: function(e) {
		Globals.isMouseDown = false;
	}
	,_reset: function() {
	}
	,_draw: function(timestamp) {
		this.draw();
		this.__export();
		if(this.isDrawActive) {
			this.requestID = window.requestAnimationFrame($bind(this,this._draw));
		}
	}
	,setup: function() {
		if(this.isDebug) {
			haxe_Log.trace("SETUP :: " + this.toString() + " -> override public function draw()",{ fileName : "SketcherBase.hx", lineNumber : 207, className : "SketcherBase", methodName : "setup"});
		}
	}
	,draw: function() {
		if(this.isDebug) {
			haxe_Log.trace("DRAW :: " + this.toString() + " -> override public function draw()",{ fileName : "SketcherBase.hx", lineNumber : 215, className : "SketcherBase", methodName : "draw"});
		}
	}
	,__export: function() {
	}
	,openFullscreen: function() {
		var elem = window.document.documentElement;
		if(elem.requestFullscreen != null) {
			elem.requestFullscreen();
		} else if(elem.mozRequestFullScreen) {
			elem.mozRequestFullScreen();
		} else if(elem.webkitRequestFullscreen) {
			elem.webkitRequestFullscreen();
		} else if(elem.msRequestFullscreen) {
			elem.msRequestFullscreen();
		}
	}
	,closeFullscreen: function() {
		if(window.document.exitFullscreen != null) {
			window.document.exitFullscreen();
		} else if(window.document.mozCancelFullScreen) {
			window.document.mozCancelFullScreen();
		} else if(window.document.webkitExitFullscreen) {
			window.document.webkitExitFullscreen();
		} else if(window.document.msExitFullscreen) {
			window.document.msExitFullscreen();
		}
	}
	,getFileName: function() {
		if(this.patternName == "" && this.description == "") {
			this.patternName = "CC-Sketcher-MatthijsKamstra";
		} else if(this.patternName == "" && this.description != "") {
			this.patternName = this.description;
		}
		return "" + StringTools.replace(this.patternName," ","_") + "-" + new Date().getTime();
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var className = c.__name__;
		return className;
	}
	,__class__: SketcherBase
};
var GithubVisual = function() {
	this.ballArray = [];
	this.sizeBall = 4;
	this.maxBalls = 100;
	this.maxDistance = 100;
	this.stageH = 700;
	this.stageW = 1000;
	var settings = new Settings(this.stageW,this.stageH,"canvas");
	settings.set_autostart(true);
	settings.set_padding(0);
	settings.set_scale(true);
	settings.set_elementID("canvas-" + this.toString());
	SketcherBase.call(this,settings);
};
GithubVisual.__name__ = "GithubVisual";
GithubVisual.bounce = function(num,min,max,sz) {
	if(sz == null) {
		sz = 0;
	}
	if(num >= max - sz / 2 || num - sz / 2 <= min) {
		return true;
	} else {
		return false;
	}
};
GithubVisual.__super__ = SketcherBase;
GithubVisual.prototype = $extend(SketcherBase.prototype,{
	setup: function() {
		this.description = this.toString();
		this.ballArray = [];
		var _g = 0;
		var _g1 = this.maxBalls;
		while(_g < _g1) {
			var i = _g++;
			this.ballArray.push(this.createBall());
		}
	}
	,createBall: function() {
		var ball = { x : sketcher_util_MathUtil.random(this.sizeBall / 2,Globals.w - this.sizeBall / 2), y : sketcher_util_MathUtil.random(this.sizeBall / 2,Globals.h - this.sizeBall / 2), speed_x : sketcher_util_MathUtil.random(-0.5,0.5), speed_y : sketcher_util_MathUtil.random(-0.5,0.5), size : this.sizeBall, colour : sketcher_util_ColorUtil.rgb(255,255,255)};
		return ball;
	}
	,moveBall: function() {
		var _g = 0;
		var _g1 = this.ballArray.length;
		while(_g < _g1) {
			var i = _g++;
			var b = this.ballArray[i];
			b.x += b.speed_x;
			b.y += b.speed_y;
			if(GithubVisual.bounce(b.x,0,Globals.w,b.size)) {
				b.speed_x *= -1;
			}
			if(GithubVisual.bounce(b.y,0,Globals.h,b.size)) {
				b.speed_y *= -1;
			}
		}
	}
	,drawBall: function() {
		var _g = 0;
		var _g1 = this.ballArray.length;
		while(_g < _g1) {
			var i = _g++;
			var b1 = this.ballArray[i];
			var circle = this.sketch.makeCircle(b1.x,b1.y,b1.size);
			circle.setStroke(b1.colour,1);
			circle.setFill(b1.colour,0);
			var _g2 = 0;
			var _g3 = this.ballArray.length;
			while(_g2 < _g3) {
				var j = _g2++;
				var b2 = this.ballArray[j];
				if(b1 == b2) {
					continue;
				}
				var _dist = sketcher_util_MathUtil.distance(b1.x,b1.y,b2.x,b2.y);
				if(_dist < this.maxDistance) {
					var alpha = 0.8 - _dist / this.maxDistance;
					var line = this.sketch.makeLine(b1.x,b1.y,b2.x,b2.y);
					var rgb = sketcher_util_ColorUtil.WHITE;
					line.setStroke(sketcher_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,null),1,alpha);
					line.setLineEnds();
					var circle1 = this.sketch.makeCircle(b1.x,b1.y,b1.size);
					circle1.setFill(b1.colour,alpha);
				}
			}
		}
	}
	,drawShape: function() {
		this.sketch.clear();
		var rgb = sketcher_util_ColorUtil.SILVER;
		this.sketch.makeBackground(sketcher_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,null));
		this.sketch.makeGradient("#4568dc","#b06ab3");
		this.moveBall();
		this.drawBall();
		this.sketch.update();
	}
	,draw: function() {
		this.drawShape();
	}
	,__class__: GithubVisual
});
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() {
	var _gthis = this;
	haxe_Log.trace("Main",{ fileName : "src/Main.hx", lineNumber : 10, className : "Main", methodName : "new"});
	Neutralino.init({ load : function() {
		_gthis.init();
	}, pingSuccessCallback : function() {
	}, pingFailCallback : function() {
	}});
};
Main.__name__ = "Main";
Main.main = function() {
	var app = new Main();
};
Main.prototype = {
	init: function() {
		var art = new GithubVisual();
	}
	,__class__: Main
};
Math.__name__ = "Math";
var Settings = function(width,height,type) {
	if(type == null) {
		type = "svg";
	}
	this.type = "svg";
	this.set_width(width);
	this.set_height(height);
	this.set_type(type.toLowerCase());
};
Settings.__name__ = "Settings";
Settings.prototype = {
	get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,get_type: function() {
		return this.type;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_padding: function() {
		return this.padding;
	}
	,set_padding: function(value) {
		return this.padding = value;
	}
	,get_scale: function() {
		return this.scale;
	}
	,set_scale: function(value) {
		return this.scale = value;
	}
	,get_element: function() {
		return this.element;
	}
	,set_autostart: function(value) {
		return this.autostart = value;
	}
	,get_elementID: function() {
		return this.elementID;
	}
	,set_elementID: function(value) {
		return this.elementID = value;
	}
	,get_sizeType: function() {
		return this.sizeType;
	}
	,__class__: Settings
};
var Sketcher = function(settings) {
	this.WRAPPER_ID = "sketcher_wrapper";
	this.SVG_ID = "sketcher_svg";
	this.WEBGL_ID = "sketcher_canvas_webgl";
	this.CANVAS_ID = "sketcher_canvas";
	this.baseArray = [];
	this.settings = settings;
	Globals.w = settings.get_width();
	Globals.h = settings.get_height();
	if(settings.get_elementID() != null) {
		this.WRAPPER_ID = settings.get_elementID();
	}
	if(settings.get_scale() == true) {
		var node = window.document.createElement("style");
		node.innerHTML = "\n\t\t\t<!-- no padding -->\n\t\t\t.sketcher-wrapper{width: 100%;height: 100%; max-width: 100vh;padding: 0;margin: 0 auto;display: flex;align-items: center;justify-content: center;}\n\t\t\tsvg {width: 100%; height: 100%; background-color:#ffffff; }\n\t\t\tcanvas{width: 100%; background-color:#ffffff; }\n\t\t\t";
		window.document.body.appendChild(node);
	}
	if(settings.get_padding() != null && settings.get_padding() >= 0) {
		var node = window.document.createElement("style");
		node.innerHTML = "\n\t\t\t<!-- with padding -->\n\t\t\t.sketcher-wrapper{width: 100%;height: 100%; max-width: 100vh;padding: 0;margin: 0 auto;display: flex;align-items: center;justify-content: center;}\n\t\t\tsvg {padding: " + settings.get_padding() + "px; width: 100%;  height: 100%; background-color:#ffffff; }\n\t\t\tcanvas {padding: " + settings.get_padding() + "px; width: 100%; background-color:#ffffff; }\n\t\t\t";
		window.document.body.appendChild(node);
	}
};
Sketcher.__name__ = "Sketcher";
Sketcher.create = function(settings) {
	var sketcher = new Sketcher(settings);
	sketcher.baseArray = [];
	return sketcher;
};
Sketcher.prototype = {
	appendTo: function(element) {
		if(element == null) {
			return this;
		}
		this.element = element;
		switch(this.settings.get_type()) {
		case "canvas":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.CANVAS_ID;
			Sketcher.ctx = this.canvas.getContext("2d",null);
			element.appendChild(this.canvas);
			break;
		case "svg":
			this.update();
			break;
		case "webgl":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.WEBGL_ID;
			Sketcher.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
			element.appendChild(this.canvas);
			break;
		default:
			haxe_Log.trace("case '" + this.settings.get_type().toLowerCase() + "': trace ('" + this.settings.get_type().toLowerCase() + "');",{ fileName : "Sketcher.hx", lineNumber : 118, className : "Sketcher", methodName : "appendTo"});
		}
		return this;
	}
	,makeBackground: function(color) {
		var shape = new sketcher_draw_Background(color);
		this.baseArray.unshift(shape);
		return shape;
	}
	,makeCircle: function(x,y,radius) {
		var shape = new sketcher_draw_Circle(x,y,radius);
		this.baseArray.push(shape);
		return shape;
	}
	,makeLine: function(x1,y1,x2,y2) {
		var shape = new sketcher_draw_Line(x1,y1,x2,y2);
		this.baseArray.push(shape);
		return shape;
	}
	,makeGradient: function(color0,color1,isLinear) {
		if(isLinear == null) {
			isLinear = true;
		}
		var shape = new sketcher_draw_Gradient(color0,color1,isLinear);
		this.baseArray.push(shape);
		return shape;
	}
	,clear: function() {
		this.baseArray = [];
		if(this.settings.get_type().toLowerCase() == "svg") {
			this.element.innerHTML = "";
		}
		if(this.settings.get_type().toLowerCase() == "canvas") {
			Sketcher.ctx.clearRect(0,0,this.settings.get_width(),this.settings.get_height());
		}
	}
	,getSVGElement: function() {
		var svg = window.document.getElementById(this.SVG_ID);
		return svg;
	}
	,update: function() {
		if(this.element == null) {
			return;
		}
		switch(this.settings.get_type()) {
		case "canvas":
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				base.ctx(Sketcher.ctx);
			}
			break;
		case "svg":
			var svgW = "" + this.settings.get_width();
			var svgH = "" + this.settings.get_height();
			if(this.settings.get_sizeType() != null) {
				svgW += "" + this.settings.get_sizeType();
				svgH += "" + this.settings.get_sizeType();
			}
			var _xml = "<?xml version=\"1.0\" standalone=\"no\"?><svg width=\"" + svgW + "\" height=\"" + svgH + "\" viewBox=\"0 0 " + svgW + " " + svgH + "\" version=\"1.1\" id=\"" + this.SVG_ID + "\" xmlns=\"http://www.w3.org/2000/svg\">";
			var content = "";
			var defs = "";
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				var draw = base.svg(this.settings);
				switch(base.type) {
				case "gradient":case "mask":
					defs += draw;
					break;
				default:
					content += draw;
				}
			}
			_xml += "<defs>" + defs + "</defs>";
			_xml += content + "</svg>";
			this.svg = _xml;
			this.element.innerHTML = _xml;
			break;
		case "webgl":
			haxe_Log.trace("webgl",{ fileName : "Sketcher.hx", lineNumber : 659, className : "Sketcher", methodName : "update"});
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				base.gl(Sketcher.gl);
			}
			break;
		default:
			haxe_Log.trace("case '" + this.settings.get_type() + "': trace ('" + this.settings.get_type() + "');",{ fileName : "Sketcher.hx", lineNumber : 668, className : "Sketcher", methodName : "update"});
		}
		this.baseArray = [];
	}
	,__class__: Sketcher
};
var Globals = function() { };
Globals.__name__ = "Globals";
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = "Xml";
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var sketcher_draw_Base = function(name) {
	this.transArr = [];
	this.dash = [];
	this.xml = Xml.createElement(name);
	sketcher_draw_Base.COUNT++;
	this.set_id(this.get_id());
};
sketcher_draw_Base.__name__ = "sketcher.draw.Base";
sketcher_draw_Base.prototype = {
	getTransform: function() {
		var str = "";
		var _g = 0;
		var _g1 = this.transArr.length;
		while(_g < _g1) {
			var i = _g++;
			str += this.transArr[i] + " ";
		}
		return str;
	}
	,setStroke: function(color,weight,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		if(weight == null) {
			weight = 1;
		}
		this.set_strokeColor(color);
		this.set_strokeWeight(weight);
		this.set_strokeOpacity(opacity);
		return this;
	}
	,setFill: function(color,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		this.set_fillColor(color);
		this.set_fillOpacity(opacity);
		return this;
	}
	,setLineEnds: function(linecap,linejoin) {
		if(linejoin == null) {
			linejoin = "round";
		}
		if(linecap == null) {
			linecap = "round";
		}
		this.set_lineCap(linecap);
		this.set_lineJoin(linejoin);
		return this;
	}
	,convertID: function(id) {
		return StringTools.replace(id.toLowerCase()," ","_");
	}
	,useDefaultsCanvas: function() {
		if(this.get_lineWeight() == null) {
			this.set_lineWeight(0);
		}
		if(this.get_fillColor() == null) {
			this.set_fillColor("#000000");
		}
		if(this.get_strokeColor() == null) {
			this.set_strokeColor("#000000");
			this.set_strokeOpacity(0);
		}
		if(this.get_fillOpacity() == null) {
			this.set_fillOpacity(1);
		}
		if(this.get_strokeOpacity() == null) {
			this.set_strokeOpacity(1);
		}
		if(this.get_lineCap() == null) {
			this.set_lineCap("butt");
		}
		if(this.get_lineJoin() == null) {
			this.set_lineJoin("miter");
		}
	}
	,get_id: function() {
		if(this.id == null) {
			this.set_id(this.getName() + "_" + sketcher_draw_Base.COUNT);
			sketcher_draw_Base.COUNT++;
		}
		return this.id;
	}
	,set_id: function(value) {
		value = this.convertID(value);
		if(this.xml != null) {
			this.xml.set("id",value == null ? "null" : "" + value);
			this.xml.set("data-count",Std.string(sketcher_draw_Base.COUNT));
		}
		return this.id = value;
	}
	,get_fill: function() {
		return this.fill;
	}
	,set_fill: function(value) {
		this.xml.set("fill",value == null ? "null" : "" + value);
		return this.fill = value;
	}
	,get_fillColor: function() {
		return this.get_fill();
	}
	,set_fillColor: function(value) {
		return this.set_fill(value);
	}
	,get_stroke: function() {
		return this.stroke;
	}
	,set_stroke: function(value) {
		this.xml.set("stroke",value == null ? "null" : "" + value);
		return this.stroke = value;
	}
	,get_strokeColor: function() {
		return this.get_stroke();
	}
	,set_strokeColor: function(value) {
		return this.set_stroke(value);
	}
	,get_lineWeight: function() {
		return this.lineWeight;
	}
	,set_lineWeight: function(value) {
		this.xml.set("stroke-width",value == null ? "null" : "" + value);
		return this.lineWeight = value;
	}
	,set_strokeWeight: function(value) {
		return this.set_lineWeight(value);
	}
	,get_strokeOpacity: function() {
		return this.strokeOpacity;
	}
	,set_strokeOpacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("stroke-opacity",v == null ? "null" : "" + v);
		return this.strokeOpacity = v;
	}
	,get_fillOpacity: function() {
		return this.fillOpacity;
	}
	,set_fillOpacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("fill-opacity",v == null ? "null" : "" + v);
		return this.fillOpacity = v;
	}
	,get_y: function() {
		return this.y;
	}
	,set_y: function(value) {
		return this.y = value;
	}
	,get_x: function() {
		return this.x;
	}
	,set_x: function(value) {
		return this.x = value;
	}
	,get_rotate: function() {
		return this.rotate;
	}
	,get_move: function() {
		return this.move;
	}
	,get_dash: function() {
		return this.dash;
	}
	,get_lineCap: function() {
		return this.lineCap;
	}
	,set_lineCap: function(value) {
		this.xml.set("stroke-linecap",Std.string(value));
		return this.lineCap = value;
	}
	,get_lineJoin: function() {
		return this.lineJoin;
	}
	,set_lineJoin: function(value) {
		this.xml.set("stroke-linejoin",Std.string(value));
		return this.lineJoin = value;
	}
	,getName: function() {
		var c = js_Boot.getClass(this);
		var name = c.__name__;
		return "" + name;
	}
	,__class__: sketcher_draw_Base
};
var sketcher_draw_Background = function(color) {
	this.type = "background";
	sketcher_draw_Base.call(this,"rect");
	this.set_fillColor(color);
	this.set_id("background-layer");
};
sketcher_draw_Background.__name__ = "sketcher.draw.Background";
sketcher_draw_Background.__super__ = sketcher_draw_Base;
sketcher_draw_Background.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x","0");
		this.xml.set("y","0");
		this.xml.set("width",Std.string(Globals.w));
		this.xml.set("height",Std.string(Globals.h));
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		ctx.beginPath();
		ctx.rect(0,0,Globals.w,Globals.h);
		ctx.fill();
		ctx.closePath();
	}
	,gl: function(gl) {
		if(!sketcher_draw_Background.ISWARN) {
			$global.console.warn("webgl is not implemented yet");
			sketcher_draw_Background.ISWARN = true;
		}
		var c = "#ff3333";
		var value = c;
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var rgba_r = _r;
		var rgba_g = _g;
		var rgba_b = _b;
		var rgba_a = _a;
		gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
		gl.clearColor(rgba_r / 255,rgba_g / 255,rgba_b / 255,rgba_a);
		gl.clear(16384);
	}
	,__class__: sketcher_draw_Background
});
var sketcher_draw_Circle = function(x,y,radius) {
	this.type = "circle";
	this.set_x(x);
	this.set_y(y);
	this.set_radius(radius);
	sketcher_draw_Base.call(this,"circle");
};
sketcher_draw_Circle.__name__ = "sketcher.draw.Circle";
sketcher_draw_Circle.__super__ = sketcher_draw_Base;
sketcher_draw_Circle.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("cx",Std.string(this.get_x()));
		this.xml.set("cy",Std.string(this.get_y()));
		this.xml.set("r",Std.string(this.get_radius()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		if(this.get_lineWeight() != null) {
			this.xml.set("stroke-width",Std.string(this.get_lineWeight()));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor_r = _r;
		var _strokeColor_g = _g;
		var _strokeColor_b = _b;
		var _strokeColor_a = _a;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			if(this.get_move() != null) {
				ctx.translate(this.get_move().x,this.get_move().y);
			}
			ctx.arc(0,0,this.get_radius(),0,2 * Math.PI);
			ctx.restore();
		}
		if(this.get_rotate() == null) {
			ctx.arc(this.get_x(),this.get_y(),this.get_radius(),0,2 * Math.PI);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
		var tmp = this.get_rotate() != null;
	}
	,gl: function(gl) {
	}
	,get_radius: function() {
		return this.radius;
	}
	,set_radius: function(value) {
		return this.radius = value;
	}
	,__class__: sketcher_draw_Circle
});
var sketcher_draw_Gradient = function(color0,color1,isLinear) {
	if(isLinear == null) {
		isLinear = true;
	}
	this.dir = sketcher_draw_GradientDir.LeftRight;
	this.type = "gradient";
	this.color0 = color0;
	this.color1 = color1;
	sketcher_draw_Base.call(this,"linearGradient");
};
sketcher_draw_Gradient.__name__ = "sketcher.draw.Gradient";
sketcher_draw_Gradient.__super__ = sketcher_draw_Base;
sketcher_draw_Gradient.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		var stop0 = Xml.createElement("stop");
		stop0.set("offset","0%");
		stop0.set("stop-color","" + this.color0);
		var stop1 = Xml.createElement("stop");
		stop1.set("offset","100%");
		stop1.set("stop-color","" + this.color1);
		this.xml.addChild(stop0);
		this.xml.addChild(stop1);
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		var w = ctx.canvas.width;
		var h = ctx.canvas.height;
		var grd;
		switch(this.dir._hx_index) {
		case 0:case 1:
			grd = ctx.createLinearGradient(0,0,w,0);
			break;
		case 2:case 3:
			grd = ctx.createLinearGradient(h,0,0,0);
			break;
		case 4:case 5:
			grd = ctx.createLinearGradient(0,0,0,h);
			break;
		case 6:case 7:
			grd = ctx.createLinearGradient(0,w,0,0);
			break;
		case 8:case 9:
			grd = ctx.createLinearGradient(0,0,w,h);
			break;
		case 10:case 11:
			grd = ctx.createLinearGradient(0,h,w,0);
			break;
		case 12:case 13:
			grd = ctx.createLinearGradient(h,w,0,0);
			break;
		case 14:case 15:
			grd = ctx.createLinearGradient(h,0,0,h);
			break;
		}
		grd.addColorStop(0,"" + this.color0);
		grd.addColorStop(1,"" + this.color1);
		this.canvasGradient = grd;
		this.gradientObj = { id : this.get_id(), canvasGradient : this.canvasGradient};
		ctx.fillStyle = grd;
		ctx.fillRect(0,0,w,h);
	}
	,gl: function(gl) {
	}
	,__class__: sketcher_draw_Gradient
});
var sketcher_draw_GradientDir = $hxEnums["sketcher.draw.GradientDir"] = { __ename__ : true, __constructs__ : ["LeftRight","LR","RightLeft","RL","TopBottom","TB","BottomTop","BT","LeftTopRightBottom","TopLeftBottomRight","LeftBottomTopRight","BottomLeftRightTop","RightBottomLeftTop","BottomRightTopLeft","TopRightLeftBottom","RightTopBottomLeft"]
	,LeftRight: {_hx_index:0,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LR: {_hx_index:1,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightLeft: {_hx_index:2,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RL: {_hx_index:3,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopBottom: {_hx_index:4,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TB: {_hx_index:5,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomTop: {_hx_index:6,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BT: {_hx_index:7,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LeftTopRightBottom: {_hx_index:8,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopLeftBottomRight: {_hx_index:9,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LeftBottomTopRight: {_hx_index:10,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomLeftRightTop: {_hx_index:11,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightBottomLeftTop: {_hx_index:12,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomRightTopLeft: {_hx_index:13,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopRightLeftBottom: {_hx_index:14,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightTopBottomLeft: {_hx_index:15,__enum__:"sketcher.draw.GradientDir",toString:$estr}
};
var sketcher_draw_Line = function(x,y,x2,y2) {
	this.type = "Line";
	this.set_x(x);
	this.set_y(y);
	this.set_x2(x2);
	this.set_y2(y2);
	sketcher_draw_Base.call(this,"line");
};
sketcher_draw_Line.__name__ = "sketcher.draw.Line";
sketcher_draw_Line.__super__ = sketcher_draw_Base;
sketcher_draw_Line.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x1",Std.string(this.get_x()));
		this.xml.set("y1",Std.string(this.get_y()));
		this.xml.set("x2",Std.string(this.get_x2()));
		this.xml.set("y2",Std.string(this.get_y2()));
		if(this.get_stroke() != null) {
			this.xml.set("stroke",this.get_stroke());
		}
		if(this.get_lineWeight() != null) {
			this.xml.set("stroke-width",Std.string(this.get_lineWeight()));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor_r = _r;
		var _strokeColor_g = _g;
		var _strokeColor_b = _b;
		var _strokeColor_a = _a;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		ctx.moveTo(this.get_x(),this.get_y());
		ctx.lineTo(this.get_x2(),this.get_y2());
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,get_x2: function() {
		return this.x2;
	}
	,set_x2: function(value) {
		return this.x2 = value;
	}
	,get_y2: function() {
		return this.y2;
	}
	,set_y2: function(value) {
		return this.y2 = value;
	}
	,__class__: sketcher_draw_Line
});
var sketcher_export_FileExport = function() { };
sketcher_export_FileExport.__name__ = "sketcher.export.FileExport";
sketcher_export_FileExport.svg2Canvas = function(svg,isJpg,filename,isTransparant) {
	if(isTransparant == null) {
		isTransparant = false;
	}
	if(isJpg == null) {
		isJpg = true;
	}
	var svgW = Std.parseInt(svg.getAttribute("width"));
	var svgH = Std.parseInt(svg.getAttribute("height"));
	var canvas = window.document.createElement("canvas");
	var ctx = canvas.getContext("2d",null);
	canvas.width = svgW;
	canvas.height = svgH;
	var image = new Image();
	image.onload = function() {
		if(isJpg) {
			ctx.fillStyle = "white";
			ctx.fillRect(0,0,canvas.width,canvas.height);
		}
		ctx.drawImage(image,0,0,svgW,svgH);
		sketcher_export_FileExport.downloadImageBg(ctx,isJpg,filename,isTransparant);
	};
	image.onerror = function(e) {
		$global.console.warn(e);
	};
	var tmp = window.btoa(svg.outerHTML);
	image.src = "data:image/svg+xml;base64," + tmp;
};
sketcher_export_FileExport.downloadTextFile = function(text,fileName) {
	if(fileName == null) {
		fileName = "CC-txt-" + new Date().getTime() + ".txt";
	}
	var el = window.document.createElement("a");
	el.href = "data:text/plain;charset=utf-8," + encodeURIComponent(text);
	el.download = fileName;
	el.style.display = "none";
	window.document.body.appendChild(el);
	el.click();
	window.document.body.removeChild(el);
};
sketcher_export_FileExport.downloadImageBg = function(ctx,isJpg,fileName,isTransparant) {
	if(isTransparant == null) {
		isTransparant = false;
	}
	if(isJpg == null) {
		isJpg = false;
	}
	haxe_Log.trace(ctx,{ fileName : "sketcher/export/FileExport.hx", lineNumber : 166, className : "sketcher.export.FileExport", methodName : "downloadImageBg", customParams : [isJpg,fileName,isTransparant]});
	var canvas = ctx.canvas;
	var ext = isJpg ? "jpg" : "png";
	if(fileName == null) {
		var hash = $global.location.hash;
		hash = StringTools.replace(hash,"#","").toLowerCase();
		if(hash == "") {
			hash = "image";
		}
		fileName = "" + hash + "-" + new Date().getTime();
	}
	var _w = canvas.width;
	var _h = canvas.height;
	if(!isTransparant) {
		var currentCanvas = ctx.canvas;
		var newCanvas = currentCanvas.cloneNode(true);
		var n_ctx = newCanvas.getContext("2d",null);
		n_ctx.fillStyle = "#FFffff";
		n_ctx.fillRect(0,0,newCanvas.width,newCanvas.height);
		n_ctx.drawImage(canvas,0,0);
		ctx.drawImage(newCanvas,0,0);
	}
	var link = window.document.createElement("a");
	link.style.cssText = "display:none";
	link.download = fileName + ("." + ext);
	if(!HTMLCanvasElement.prototype.toBlob) {
		haxe_Log.trace("There is no blob",{ fileName : "sketcher/export/FileExport.hx", lineNumber : 235, className : "sketcher.export.FileExport", methodName : "downloadImageBg"});
		link.href = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
		link.click();
		link.remove();
	} else {
		haxe_Log.trace("Attack of the blob",{ fileName : "sketcher/export/FileExport.hx", lineNumber : 241, className : "sketcher.export.FileExport", methodName : "downloadImageBg"});
		ctx.canvas.toBlob(function(blob) {
			link.href = URL.createObjectURL(blob);
			link.click();
			link.remove();
		},isJpg ? "image/jpeg" : "",1);
	}
	window.document.body.appendChild(link);
};
var sketcher_util_ColorUtil = function() { };
sketcher_util_ColorUtil.__name__ = "sketcher.util.ColorUtil";
sketcher_util_ColorUtil.getColour = function(r,g,b,a) {
	var c;
	if(g == null) {
		c = sketcher_util_ColorUtil.rgb(r,r,r);
	} else if(b == null && a == null) {
		c = sketcher_util_ColorUtil.rgba(r,r,r,g);
	} else if(a == null) {
		c = sketcher_util_ColorUtil.rgb(r,g,b);
	} else {
		c = sketcher_util_ColorUtil.rgba(r,g,b,a);
	}
	return c;
};
sketcher_util_ColorUtil.rgb = function(r,g,b) {
	if(g == null) {
		g = r;
	}
	if(b == null) {
		b = r;
	}
	return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ")";
};
sketcher_util_ColorUtil.rgba = function(r,g,b,a) {
	if(g == null) {
		return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ")";
	} else if(b == null) {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(g,0,1) + ")";
	} else if(a == null) {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", 1)";
	} else {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", " + sketcher_util_MathUtil.clamp(a,0,1) + ")";
	}
};
var sketcher_util_MathUtil = function() { };
sketcher_util_MathUtil.__name__ = "sketcher.util.MathUtil";
sketcher_util_MathUtil.radians = function(deg) {
	return deg * Math.PI / 180;
};
sketcher_util_MathUtil.distance = function(x1,y1,x2,y2) {
	return sketcher_util_MathUtil.dist(x1,y1,x2,y2);
};
sketcher_util_MathUtil.dist = function(x1,y1,x2,y2) {
	x2 -= x1;
	y2 -= y1;
	return Math.sqrt(x2 * x2 + y2 * y2);
};
sketcher_util_MathUtil.random = function(min,max) {
	if(min == null) {
		min = 0;
		max = 1;
	} else if(max == null) {
		max = min;
		min = 0;
	}
	return Math.random() * (max - min) + min;
};
sketcher_util_MathUtil.clamp = function(value,min,max) {
	return Math.min(Math.max(value,Math.min(min,max)),Math.max(min,max));
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
Globals.MOUSE_UP = "mouseup";
Globals.KEY_DOWN = "keydown";
Globals.KEY_UP = "keyup";
Globals.RESIZE = "resize";
Globals.isMouseDown = false;
Globals.isFullscreen = false;
Xml.Element = 0;
Xml.Document = 6;
sketcher_draw_Base.COUNT = 0;
sketcher_util_ColorUtil.SILVER = { r : Math.round(221), g : Math.round(221), b : Math.round(221)};
sketcher_util_ColorUtil.WHITE = { r : Math.round(255), g : Math.round(255), b : Math.round(255)};
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
